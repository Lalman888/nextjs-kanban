// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  boards        Board[]
  labels        Label[]
  activities    Activity[]
  favoriteBoards FavoriteBoard[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Board {
  id          String    @id @default(cuid())
  title       String
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  columns     Column[]
  labels  Label[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  activities Activity[]
  favoritedBy FavoriteBoard[]
}

model Column {
  id         String    @id @default(cuid())
  title      String
  boardId    String
  board      Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks      Task[]
  order      Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Task {
  id          String         @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  startDate   DateTime?      // New field for start date
  columnId    String
  column      Column         @relation(fields: [columnId], references: [id], onDelete: Cascade)
  labels      LabelOnTask[]
  checklists  Checklist[]    // Relation to Checklist
  order       Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  activities Activity[]
}

model FavoriteBoard {
  userId  String
  boardId String
  user    User    @relation(fields: [userId], references: [id])
  board   Board   @relation(fields: [boardId], references: [id])
  @@id([userId, boardId])
}

model Label {
  id      String  @id @default(cuid())
  name    String
  color   String
  userId  String
  user    User    @relation(fields: [userId], references: [id])
  boardId String
  board   Board   @relation(fields: [boardId], references: [id])
  tasks   LabelOnTask[]
}

model LabelOnTask {
  labelId String
  taskId  String
  label   Label    @relation(fields: [labelId], references: [id])
  task    Task     @relation(fields: [taskId], references: [id])

  @@id([labelId, taskId])
}

model Checklist {
  id        String           @id @default(cuid())
  title     String
  taskId    String
  task      Task             @relation(fields: [taskId], references: [id])
  items     ChecklistItem[]
}

model ChecklistItem {
  id          String     @id @default(cuid())
  content     String
  isChecked   Boolean    @default(false)
  checklistId String
  checklist   Checklist  @relation(fields: [checklistId], references: [id])
}

model Activity {
  id          String        @id @default(cuid())
  type        ActivityType
  content     String?
  createdAt   DateTime      @default(now())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  taskId      String?
  task        Task?         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  boardId     String?
  board       Board?        @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_DELETED
  COMMENT_ADDED
  BOARD_UPDATED
}